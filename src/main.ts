import { App, Notice, Platform, Plugin, PluginSettingTab, Setting, TFile, TFolder, normalizePath } from 'obsidian';
import VCard from './vcard';
import { IContactsService, ContactsService } from './contactsService';
import { ContentSeperator, FileService, IFileService } from './fileService';
import { FolderSuggest } from './suggersters/folderSuggester';

interface ContactsPluginSettings {
	contactsGroup: string;
	contactsFolder: string;
	autogenerationStartTag: string
	autogenerationStartText: string
	autogenerationEndTag: string
	autogenerationEndText: string
	enabledContactFields: string
}

class SettingTab extends PluginSettingTab {
	plugin: ContactsPlugin;

	constructor(app: App, plugin: ContactsPlugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;

		containerEl.empty();

		new Setting(containerEl)
			.setName('Contacts folder')
			.setDesc('Select the folder in which your contacts will stored')
			.addSearch((searchQuery) => {
				new FolderSuggest(searchQuery.inputEl)
				searchQuery.setPlaceholder('Select a folder')
						.setValue(this.plugin.settings.contactsFolder)
						.onChange(async (newFolder) => {
							this.plugin.settings.contactsFolder = newFolder;
							await this.plugin.saveSettings();
						});
		});
		
		new Setting(containerEl)
			.setName('Contacts group')
			.setDesc('Enter the name of the group ("Smart List") in which your contacts are stored in the MacOS Contacts app')
			.addText(text => text
				.setPlaceholder('Obsidian')
				.setValue(this.plugin.settings.contactsGroup)
				.onChange(async (value) => {
					this.plugin.settings.contactsGroup = value;
					await this.plugin.saveSettings();
				}));
		
		new Setting(containerEl)
			.setName('Configure the shown contact fields below')
			.setDesc('To update the shown contact fields, re-sync your contacts')

		for (let attribute of VCard.getVCardFields()) {
			new Setting(containerEl)
				.setName(`${attribute}`)
				.addToggle((toggle) => {
					toggle.setValue(this.plugin.settings.enabledContactFields.includes(attribute))
					toggle.onChange(async (value) => {
						this.plugin.settings.enabledContactFields = this.toggleEnabledField(attribute, value);
						await this.plugin.saveSettings();
					});
				});
		}
	}

	toggleEnabledField(field: string, value: boolean): string {
		let enabledFields = this.plugin.settings.enabledContactFields.split(',');
		if (value) {
			enabledFields.push(field);
		} else {
			enabledFields = enabledFields.filter((enabledField) => enabledField != field);
		}
		return enabledFields.join(',');
	}
}

const DEFAULT_SETTINGS: ContactsPluginSettings = {
	contactsGroup: 'Obsidian',
	contactsFolder: 'Contacts',
	autogenerationStartTag: "START",
	autogenerationStartText: "Content BELOW this line is AUTOGENERATED and will be REPLACED.",
	autogenerationEndTag: "END",
	autogenerationEndText: "Content ABOVE this line is AUTOGENERATED and will be REPLACED.",
	enabledContactFields: 'nickname,emails,title,organization,telephones,addresses,birthdate,URLs,notes'
}

export default class ContactsPlugin extends Plugin {
	settings: ContactsPluginSettings;

	async onload() {
		await this.loadSettings();

		// This adds a simple command that can be triggered anywhere
		this.addCommand({
			id: 'sync-contacts',
			name: 'Sync contacts',
			callback: async () =>  {
				if (!Platform.isMacOS) 
					return new Notice("Error: This plugin only works on MacOS");
				
				new Notice('Syncing...')
				
				let loadContactsLogic: IContactsService = new ContactsService(this.settings.contactsGroup, this.settings.enabledContactFields)
				let numContactsPromise = loadContactsLogic.getNumberOfContacts().then((numContacts) => {
					new Notice(`Found ${numContacts} Contacts in group ${this.settings.contactsGroup}`)
					return numContacts
				})

				let fileService: IFileService = new FileService();
				let createFolderPromise = fileService.createFolder(this.settings.contactsFolder, this.app)

				let contentSeperator = new ContentSeperator(
					this.settings.autogenerationStartTag, 
					this.settings.autogenerationStartText, 
					this.settings.autogenerationEndTag, 
					this.settings.autogenerationEndText,
				)

				let [numContacts, _] = await Promise.all([numContactsPromise, createFolderPromise])

				// Load contacts from MacOS "Contacts" and save to files
				let markdownResults = await loadContactsLogic.loadContacts();
				let successfulContacts = 0
				let promises: Array<Promise<any>> = [];
				for (let [filename, markdown] of markdownResults) {
					let filePath = normalizePath(`${this.settings.contactsFolder}/${filename}.md`);
					let file = this.app.vault.getAbstractFileByPath(filePath);
					
					let newContactInfo = contentSeperator.buildContentString(markdown);

					// contactFile is a folder 
					if (file instanceof TFolder) {
						console.error(`Error: ${filePath} is a folder`);
						new Notice(`Error: ${filePath} is a folder`);
					// contactFile doesn't exist yet
					} else if (file === null) {
						promises.push(
							fileService.saveFile(filePath, newContactInfo, this.app)
								.then((_) => successfulContacts++)
								.catch((error) => console.error(`Error syncing ${filename}\n${error}`))
						);
					// contactFile exists
					} else if (file instanceof TFile) {
						promises.push(
							// extract the old contact info and replace it with the new data
							fileService.updateFile(file, newContactInfo, new ContentSeperator(this.settings.autogenerationStartTag, this.settings.autogenerationStartText, this.settings.autogenerationEndTag, this.settings.autogenerationEndText), this.app)
							.then((_) => successfulContacts++)
							.catch((error) => console.error(`Error syncing ${filename}\n${error}`))
						);
					}
				}

				await Promise.all(promises)
				.catch((error) => {
					new Notice("Error syncing contacts!");
					console.error(error);
				}).finally(() => {
					new Notice(`Successfully synced ${successfulContacts} of ${numContacts} Contacts`)
					console.info(`Successfully synced ${successfulContacts} of ${numContacts} Contacts`)
				});
			}
		});


		// This adds a settings tab so the user can configure various aspects of the plugin
		this.addSettingTab(new SettingTab(this.app, this));
	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}
}
