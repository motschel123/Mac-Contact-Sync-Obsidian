import { PluginSettingTab, App, Setting } from "obsidian";
import ContactsPlugin from "./main";
import { FolderSuggest } from "./suggesters/FolderSuggester";
import VCard from "./VCard";

export const DEFAULT_SETTINGS: ContactsPluginSettings = {
	contactsGroup: 'Obsidian',
	contactsFolder: 'Contacts',
	autogenerationStartTag: "START",
	autogenerationStartText: "Content BELOW this line is AUTOGENERATED and will be REPLACED.",
	autogenerationEndTag: "END",
	autogenerationEndText: "Content ABOVE this line is AUTOGENERATED and will be REPLACED.",
	enabledContactFields: 'nickname,emails,title,organization,telephones,addresses,birthdate,URLs,notes'
}

export interface ContactsPluginSettings {
	contactsGroup: string;
	contactsFolder: string;
	autogenerationStartTag: string
	autogenerationStartText: string
	autogenerationEndTag: string
	autogenerationEndText: string
	enabledContactFields: string
}

export class ContactsSettingTab extends PluginSettingTab {
	plugin: ContactsPlugin;

	constructor(app: App, plugin: ContactsPlugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;

		containerEl.empty();

		new Setting(containerEl)
			.setName('Contacts folder')
			.setDesc('Select the folder in which your contacts will stored')
			.addSearch((searchQuery) => {
				new FolderSuggest(searchQuery.inputEl)
				searchQuery.setPlaceholder('Select a folder')
						.setValue(this.plugin.settings.contactsFolder)
						.onChange(async (newFolder) => {
							this.plugin.settings.contactsFolder = newFolder;
							await this.plugin.saveSettings();
						});
		});
		
		new Setting(containerEl)
			.setName('Contacts group')
			.setDesc('Enter the name of the group ("Smart List") in which your contacts are stored in the MacOS Contacts app')
			.addText(text => text
				.setPlaceholder('Obsidian')
				.setValue(this.plugin.settings.contactsGroup)
				.onChange(async (value) => {
					this.plugin.settings.contactsGroup = value;
					await this.plugin.saveSettings();
				}));
		
		new Setting(containerEl)
			.setName('Configure the shown contact fields below')
			.setDesc('To update the shown contact fields, re-sync your contacts')

		for (let attribute of VCard.getVCardFields()) {
			new Setting(containerEl)
				.setName(`${attribute}`)
				.addToggle((toggle) => {
					toggle.setValue(this.plugin.settings.enabledContactFields.includes(attribute))
					toggle.onChange(async (value) => {
						this.plugin.settings.enabledContactFields = this.toggleEnabledField(attribute, value);
						await this.plugin.saveSettings();
					});
				});
		}
	}

	toggleEnabledField(field: string, value: boolean): string {
		let enabledFields = this.plugin.settings.enabledContactFields.split(',');
		if (value) {
			enabledFields.push(field);
		} else {
			enabledFields = enabledFields.filter((enabledField) => enabledField != field);
		}
		return enabledFields.join(',');
	}
}